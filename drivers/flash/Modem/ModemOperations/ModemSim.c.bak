/** C Header ******************************************************************

*******************************************************************************/

#include <assert.h>
#include <string.h>     /* memset() */
#include <stdio.h>      /* printf() */
#include <ctype.h>      /* isprint() */
#include <stdlib.h>

#include <stdarg.h>         // For va_arg support

#include "Types.h"

// PCOM Project Targets
#include "Target.h"             // Hardware target specifications

#include "Asc.h"
#include "Config.h"
#include "Debug.h"
#include "General.h"
#include "Gpio.h"
#include "Led.h"
//#include "Modem.h"
//#include "Module.h"     /* Common task control structure definition */
#include "StringTable.h"
#include "Timer.h"
#include "Usart.h"
#include "Datalog.h"
#include "Control.h"
#include "Console.h"

#include "ModemPower.h"
#include "ModemSim.h"
#include "../ModemData.h"
#include "../ModemCommandResponse/Modem.h"
#include "../ModemCommandResponse/ModemCommand.h"
#include "../ModemCommandResponse/ModemResponse.h"
#include "../../Utils/StateMachine.h"

typedef enum
{
    MODEM_SIM_STATE_UNINITIALIZED = 0,
    
    MODEM_SIM_STATE_DISABLED,
    MODEM_SIM_STATE_IDLE,
    
    MODEM_SIM_STATE_START,
    MODEM_SIM_STATE_RUN_IS_SIM_READY,
    MODEM_SIM_STATE_RUN_CIMI,
    MODEM_SIM_STATE_RUN_CCID,
    
    MODEM_SIM_STATE_PASS,
    MODEM_SIM_STATE_FAIL,
    MODEM_SIM_STATE_END,
    
    MODEM_SIM_STATE_MAX,
}ModemPowerStateEnum;

const CHAR *    cModemSimStateMachineName[MODEM_SIM_STATE_MAX] = 
{
    "UNINITIALIZED",
    
    "Sim Disabled",
    "Sim Idle",
    
    "Sim Start",
    "Is Ready",
    "Get cimi",
    "Get ccid",
    
    "Sim Pass",
    "Sim Fail",
    "Sim End",
};


////////////////////////////////////////////////////////////////////////////////////////////////////

// unique from this module
static BOOL                     gfIsSimReady;

//
static ModemDataType   *gpModemData;

// operation
static BOOL                     gfIsWaitingForNewCommand;
static ModemStateMachineType    gtStateMachine;
static ModemCommandSemaphoreEnum geSemaphore;

////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////
//!
//!
//////////////////////////////////////////////////////////////////////////////////////////////////
void ModemSimInit( void )
{
    // set state machine to a initial state.
    StateMachineInit( &gtStateMachine.tState );
    
    //ModemResponseModemDataSemaphoreReserve( &geSemaphore );
    //gpModemData = ModemResponseModemDataGetPtr( &geSemaphore );    
    gpModemData = ModemResponseModemDataGetPtr();    
    //ModemResponseModemDataSemaphoreRelease( &geSemaphore );
    if( gpModemData == NULL )
    {
        // catch this bug on development time
        while(1);
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//!
//!
//////////////////////////////////////////////////////////////////////////////////////////////////
void ModemSimCheckRun( void )
{
    if( gfIsWaitingForNewCommand )
    {
        // indicate command will start running so more commands are not accepted
        gfIsWaitingForNewCommand = FALSE;
        
        StateMachineChangeState( &gtStateMachine.tState, MODEM_SIM_STATE_START );
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//!
//!
//////////////////////////////////////////////////////////////////////////////////////////////////
BOOL ModemSimIsWaitingForCommand( void )
{
    return gfIsWaitingForNewCommand;
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//!
//!
//////////////////////////////////////////////////////////////////////////////////////////////////
BOOL ModemSimIsReady( void )
{
    return gfIsSimReady;
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//!
//!
//////////////////////////////////////////////////////////////////////////////////////////////////
void ModemSimStateMachine( void )
{
    StateMachineUpdate( &gtStateMachine.tState );

    if( StateMachineIsFirtEntry( &gtStateMachine.tState ) )
    {
        // print message that power is on
        ModemConsolePrintDbg( "MDM SM <%s>", cModemSimStateMachineName[gtStateMachine.tState.bStateCurrent] );        
    }

    switch( gtStateMachine.tState.bStateCurrent )
    {        
        case MODEM_SIM_STATE_UNINITIALIZED :
        {
            // go to waiting for operation to run
            StateMachineChangeState( &gtStateMachine.tState, MODEM_SIM_STATE_DISABLED );
            break;
        }
            
        case MODEM_SIM_STATE_DISABLED:
        {
            //////////////////////////////////////////////////
            // DISABLED
            // not allowed to run operation
            //////////////////////////////////////////////////
        
            if( StateMachineIsFirtEntry( &gtStateMachine.tState ) )
            {
                gfIsSimReady = FALSE;
                // clear sim data strings
                gpModemData->tSimCard.fIsSimReady = FALSE;
                gpModemData->tSimCard.szCimei[0] = '\0';
                gpModemData->tSimCard.szIccId[0] = '\0';               

                ModemConsolePrintf( "Modem SIM disabled\r\n" );
            }


            gfIsWaitingForNewCommand    = FALSE;            
        
            if( ModemPowerIsPowerEnabled() )
            {
                StateMachineChangeState( &gtStateMachine.tState, MODEM_SIM_STATE_IDLE );
            }
            break;
        }
        
        case MODEM_SIM_STATE_IDLE:
        {
            //////////////////////////////////////////////////
            // IDLE
            // waiting for new operation request
            //////////////////////////////////////////////////

            gfIsWaitingForNewCommand    = TRUE;

            // while waiting somebody could remove sim. update local var
            gfIsSimReady = gpModemData->tSimCard.fIsSimReady;
            
            if( ModemPowerIsPowerEnabled() == FALSE )
            {
                StateMachineChangeState( &gtStateMachine.tState, MODEM_SIM_STATE_DISABLED );
            }
            break;
        }
         
        case MODEM_SIM_STATE_START:
        {            
            gpModemData->tSimCard.fIsSimReady = FALSE;
            gpModemData->tSimCard.szCimei[0] = '\0';
            gpModemData->tSimCard.szIccId[0] = '\0';               
            
            StateMachineChangeState( &gtStateMachine.tState, MODEM_SIM_STATE_RUN_IS_SIM_READY );
            break;
        }
        
        case MODEM_SIM_STATE_RUN_IS_SIM_READY:
        {
            if( StateMachineIsFirtEntry( &gtStateMachine.tState ) )
            {
                if( ModemCommandProcessorReserve( &geSemaphore ) )
                {
                    ModemCommandProcessorResetResponse();                    
                    ModemCommandProcessorSetExpectedResponse( TRUE, "+CPIN:", 1, TRUE );
                    
                    // if need to wait for response set time out
                    StateMachineSetTimeOut( &gtStateMachine.tState, 1000 );
                    ModemCommandProcessorSendAtCommand( "+CPIN?" );
                }
                else
                {
                    // Set ERROR
                    ModemEventLog
                (
                    TRUE,
                        "sim[%s] Error='%s'", 
                        cModemSimStateMachineName[gtStateMachine.tState.bStateCurrent], 
                        "semaphore busy" 
                    );

                    // before change state always release semaphore
                    ModemCommandProcessorRelease( &geSemaphore );
                    StateMachineChangeState( &gtStateMachine.tState, MODEM_SIM_STATE_FAIL );
                    break;
                }                        
            }
            
            if( ModemCommandProcessorIsResponseComplete() )
            {
                if( ModemCommandProcessorIsError() )
                {
                    StateMachineChangeState( &gtStateMachine.tState, MODEM_SIM_STATE_FAIL );
                }
                else
                {                
                    // check if response indicate sim is ready
                    if( gpModemData->tSimCard.fIsSimReady )
                    {
                        StateMachineChangeState( &gtStateMachine.tState, MODEM_SIM_STATE_RUN_CIMI );
                    }
                    else
                    {
                        StateMachineChangeState( &gtStateMachine.tState, MODEM_SIM_STATE_FAIL );
                    }
                }
                // before change state always release semaphore
                ModemCommandProcessorRelease( &geSemaphore );
                break;
            }            

            if( StateMachineIsTimeOut( &gtStateMachine.tState ) ) 
            {
                // Set ERROR
                ModemEventLog
                (
                    TRUE,
                        "sim[%s] Error='%s'", 
                        cModemSimStateMachineName[gtStateMachine.tState.bStateCurrent], 
                        "timeout" 
                    );

                // before change state always release semaphore
                ModemCommandProcessorRelease( &geSemaphore );
                StateMachineChangeState( &gtStateMachine.tState, MODEM_SIM_STATE_FAIL );
            }
            break;
        }
            
        case MODEM_SIM_STATE_RUN_CIMI:
        {
            if( StateMachineIsFirtEntry( &gtStateMachine.tState ) )
            {
                if( ModemCommandProcessorReserve( &geSemaphore ) )
                {
                    ModemCommandProcessorResetResponse();
                    ModemCommandProcessorSetExpectedResponse( TRUE, "#CIMI:", 1, TRUE );
                    
                    // if need to wait for response set time out
                    StateMachineSetTimeOut( &gtStateMachine.tState, 1000 );
                    ModemCommandProcessorSendAtCommand( "#CIMI" );
                }
                else
                {
                    // Set ERROR
                    ModemEventLog
                (
                    TRUE,
                        "sim[%s] Error='%s'", 
                        cModemSimStateMachineName[gtStateMachine.tState.bStateCurrent], 
                        "semaphore busy" 
                    );

                    // before change state always release semaphore
                    ModemCommandProcessorRelease( &geSemaphore );
                    StateMachineChangeState( &gtStateMachine.tState, MODEM_SIM_STATE_FAIL );
                    break;
                }                        
            }
            
            if( ModemCommandProcessorIsResponseComplete() )
            {
                if( ModemCommandProcessorIsError() )
                {
                    StateMachineChangeState( &gtStateMachine.tState, MODEM_SIM_STATE_FAIL );
                }
                else
                {                
                    StateMachineChangeState( &gtStateMachine.tState, MODEM_SIM_STATE_RUN_CCID );
                }
                // before change state always release semaphore
                ModemCommandProcessorRelease( &geSemaphore );
                break;
            }            

            if( StateMachineIsTimeOut( &gtStateMachine.tState ) ) 
            {
                // Set ERROR
                ModemEventLog
                (
                    TRUE,
                        "sim[%s] Error='%s'", 
                        cModemSimStateMachineName[gtStateMachine.tState.bStateCurrent], 
                        "timeout" 
                    );

                // before change state always release semaphore
                ModemCommandProcessorRelease( &geSemaphore );
                StateMachineChangeState( &gtStateMachine.tState, MODEM_SIM_STATE_FAIL );
            }
            break;
        }
            
        case MODEM_SIM_STATE_RUN_CCID:
        {
            if( StateMachineIsFirtEntry( &gtStateMachine.tState ) )
            {
                if( ModemCommandProcessorReserve( &geSemaphore ) )
                {
                    ModemCommandProcessorResetResponse();
                    ModemCommandProcessorSetExpectedResponse( TRUE, "#CCID:", 1, TRUE );
                    
                    // if need to wait for response set time out
                    StateMachineSetTimeOut( &gtStateMachine.tState, 1000 );
                    ModemCommandProcessorSendAtCommand( "#CCID" );
                }
                else
                {
                    // Set ERROR
                    ModemEventLog
                (
                    TRUE,
                        "sim[%s] Error='%s'", 
                        cModemSimStateMachineName[gtStateMachine.tState.bStateCurrent], 
                        "semaphore busy" 
                    );

                    // before change state always release semaphore
                    ModemCommandProcessorRelease( &geSemaphore );
                    StateMachineChangeState( &gtStateMachine.tState, MODEM_SIM_STATE_FAIL );
                    break;
                }
            }
            
            if( ModemCommandProcessorIsResponseComplete() )
            {                
                if( ModemCommandProcessorIsError() )
                {
                    StateMachineChangeState( &gtStateMachine.tState, MODEM_SIM_STATE_FAIL );
                }
                else
                {                
                    StateMachineChangeState( &gtStateMachine.tState, MODEM_SIM_STATE_PASS );
                }
                // before change state always release semaphore
                ModemCommandProcessorRelease( &geSemaphore );
                break;
            }

            if( StateMachineIsTimeOut( &gtStateMachine.tState ) ) 
            {
                // Set ERROR
                ModemEventLog
                (
                    TRUE,
                        "sim[%s] Error='%s'", 
                        cModemSimStateMachineName[gtStateMachine.tState.bStateCurrent], 
                        "timeout" 
                    );

                // before change state always release semaphore
                ModemCommandProcessorRelease( &geSemaphore );
                StateMachineChangeState( &gtStateMachine.tState, MODEM_SIM_STATE_FAIL );
            }
            break;
        }
        
        case MODEM_SIM_STATE_PASS:
        {
            gfIsSimReady = gpModemData->tSimCard.fIsSimReady;
            ModemConsolePrintf( "Modem SIM pass\r\n" );            

            StateMachineChangeState( &gtStateMachine.tState, MODEM_SIM_STATE_END );
            break;
        }
        
        case MODEM_SIM_STATE_FAIL:
        {
            gfIsSimReady = FALSE;
            // clear sim data strings
            gpModemData->tSimCard.fIsSimReady = FALSE;
            gpModemData->tSimCard.szCimei[0] = '\0';
            gpModemData->tSimCard.szIccId[0] = '\0';   
                        
            ModemConsolePrintf( "Modem SIM fail\r\n" );
            
            // Set ERROR
            ModemEventLog
            (
                TRUE,
                "Sim Error=Sim detection failed"                
            );
            
            StateMachineChangeState( &gtStateMachine.tState, MODEM_SIM_STATE_END );
            break;
        }
        
        case MODEM_SIM_STATE_END:
        {
            StateMachineChangeState( &gtStateMachine.tState, MODEM_SIM_STATE_IDLE );
            
            break;
        }
                   
        default:
        {
            StateMachineChangeState( &gtStateMachine.tState, MODEM_SIM_STATE_UNINITIALIZED );            
            break;
        }
    }
}

ModemDataSimCardType  * ModemSimGetInfoPtr        ( void )
{
    return &gpModemData->tSimCard;    
}